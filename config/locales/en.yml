# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.

en:
  opera:
    will_start_soon: 'Task will start in two seconds.'
    task_performing: "Task is performing. You'll see results just as calculations are complete."
    reload_manually: "This page is to be updated/reloaded in %{timeout} seconds. If it's not done automatically, click <a href=\"%{redirect_url}\">here</a>"
    ticket_number: "Remember your ticket number <em>%{ticket}</em> to be able to view results later"
  enumerize:
    query_data_model:
      PCM: 'PCM'
      PWM: 'PWM'
      PPM: 'PPM'
    data_model_first:
      PCM: 'PCM'
      PWM: 'PWM'
      PPM: 'PPM'
    data_model_second:
      PCM: 'PCM'
      PWM: 'PWM'
      PPM: 'PPM'
    background_mode:
      wordwise: 'Wordwise background'
      gc_content: 'GC-content'
      frequencies: 'Frequencies'
    collection:
      hocomoco: 'HOCOMOCO'
      jaspar: 'Jaspar'
      selex: 'HT-SELEX'
      swissregulon: 'SwissRegulon'
      homer: 'HOMER'
  task_descriptions:
    EvaluateSimilarity: 'Evaluate similarity between two TFBS motifs using Jaccard metrics'
    ScanCollection: 'Scan collection for TFBS motifs similar to a given one'
    SnpScan: 'Find motifs which binds different allele variants with different affinity'
  task_parameters:
    EvaluateSimilarity:
      first_matrix: 'Positional matrix of the first motif in format according to its data model'
      data_model_first: 'Data model of the first motif. Can be either positional weight matrix(PWM) or positional count matrix(PCM) or positional frequency matrix(PFM)'
      second_matrix: 'Positional matrix of the second motif in format according to its data model'
      data_model_second: 'Data model of the second motif. Can be either positional weight matrix(PWM) or positional count matrix(PCM) or positional frequency matrix(PFM)'

      #background: 'Background model. One can specify ACGT-frequencies or use wordwise background (uniform background represented in number of words instead of part of all words)'
      background_mode: 'Background model. One can specify ACGT-frequencies or use wordwise background (uniform background represented in number of words instead of part of all words)'
      background_gc_content: 'Background defined by GC-content. It should be value in range 0 to 1'
      background_frequencies: 'Background defined by frequencies of ACGT-nucleotides. There should be four values in range 0 to 1, their sum should be 1'

      pvalue_boundary: 'Upper boundary (default) means that the obtained P-value is greater than or equal to the requested P-value'

      effective_count_first: 'Effective samples set size for PPM-to-PCM-to-PWM conversion'
      pseudocount_first: 'Pseudocount to convert PCM to PWM'

      effective_count_second: 'Effective samples set size for PPM-to-PCM-to-PWM conversion'
      pseudocount_second: 'Pseudocount to convert PCM to PWM'

      pvalue: 'P-value to obtain motif thresholds'
      discretization: 'PWM discretization'
    ScanCollection:
      query_data_model: 'Data model of the query motif. Can be either positional weight matrix(PWM) or positional count matrix(PCM) or positional frequency matrix(PFM)'
      query_matrix: 'Positional matrix of the query motif in format according to its data model'

      query_background_mode: 'Background model. One can specify ACGT-frequencies or use wordwise background (uniform background represented in number of words instead of part of all words)'
      query_background_gc_content: 'Background defined by GC-content. It should be value in range 0 to 1'
      query_background_frequencies: 'Background defined by frequencies of ACGT-nucleotides. There should be four values in range 0 to 1, their sum should be 1'

      pvalue: 'P-value to obtain motif thresholds'
      pvalue_boundary: 'Upper boundary (default) means that the obtained P-value is greater than or equal to the requested P-value'

      query_effective_count: 'Effective samples set size for PPM-to-PCM-to-PWM conversion'
      query_pseudocount: 'Pseudocount to convert PCM to PWM'

      similarity_cutoff: 'Minimal similarity to treat motifs as similar'
      precise_recalc_cutoff: 'Minimal similarity to recalculate similarity in precise mode (with greater discretization)'
    SnpScan:
      snp_list: "List of sequences with SNPs. Each sample should be on a separate line. Samples should contain name of SNP and place of SNP surrounded with flanking sequences (it's preferable to have 25 nucleotides from each side).<br>Example:<br>rs10040172  gatttgccctgattgcagttactga[G/A]tggtacagacatcgtaataatctta"
      collection: 'Collection of transcription factor binding site motifs to test SNPs on'
      pvalue_cutoff: "Maximal pvalue to treat DNA subsequence as TF's site"
      fold_change_cutoff: "Minimal fraction of P-values to treat change in affinity as significant"

      background_mode: 'Background model. One can specify ACGT-frequencies or use wordwise background (uniform background represented in number of words instead of part of all words)'
      background_gc_content: 'Background defined by GC-content. It should be value in range 0 to 1'
      background_frequencies: 'Background defined by frequencies of ACGT-nucleotides. There should be four values in range 0 to 1, their sum should be 1'
